#!/usr/bin/env bash
set -e

# ==============================================================================
# Claude Project Sync Tool v1.0.0 - Independent Sync Utility
# ==============================================================================
#
# 🎯 概要: Claude変更の独立リアルタイム同期ツール
# 📊 状態: 動作確認済み・独立実行可能
# 🏷️  タグ: v2.3.0-stable対応
#
# 🔧 主要機能:
# - Claudeコード変更のリアルタイム検出
# - 30秒間隔での自動同期
# - 依存関係自動インストール（npm/pip）
# - エディタ自動起動（Cursor/VS Code）
# - プロジェクト進捗可視化
#
# 🎯 使用目的:
# - 既存プロジェクトでのClaude監視
# - auto_setup.sh非依存の同期機能
# - カスタム監視ワークフロー
#
# 📝 使用法:
# ./sync_claude_project (プロジェクトディレクトリ内で実行)
#
# 🔗 連携:
# - feat/initial-development ブランチ監視
# - GitHub リモートリポジトリ必須
#
# ⚠️  前提条件: Gitリポジトリ内・リモート接続確立済み
# ==============================================================================

# 🔄 Claude Project Sync Tool
# Cursor風のリアルタイム同期体験を提供

readonly SCRIPT_VERSION="1.0.0"

# Colors for output
readonly GREEN='\033[0;32m'
readonly BLUE='\033[0;34m'
readonly YELLOW='\033[1;33m'
readonly NC='\033[0m'

log() {
  echo -e "${BLUE}[$(date '+%H:%M:%S')]${NC} $*"
}

success() {
  echo -e "${GREEN}✅${NC} $*"
}

warning() {
  echo -e "${YELLOW}⚠️${NC} $*"
}

# Main sync function
sync_claude_project() {
  if [[ ! -d ".git" ]]; then
    echo "❌ Gitリポジトリではありません"
    exit 1
  fi

  local branch_name="feat/initial-development"
  local repo_name
  repo_name=$(basename "$PWD")

  echo ""
  echo "┌─────────────────────────────────────────────────────────┐"
  echo "│  🔄 Claude Project Sync - v$SCRIPT_VERSION                │"
  echo "│                                                         │"
  echo "│  💡 Claudeの変更をリアルタイムで同期します              │"
  echo "└─────────────────────────────────────────────────────────┘"
  echo ""

  log "🔍 プロジェクト: $repo_name"
  log "🌿 ブランチ: $branch_name"
  echo ""

  # Check if branch exists
  if ! git rev-parse --verify "$branch_name" >/dev/null 2>&1; then
    if git ls-remote origin "$branch_name" >/dev/null 2>&1; then
      log "📥 リモートブランチをチェックアウト中..."
      git fetch origin "$branch_name" >/dev/null 2>&1
      git checkout -b "$branch_name" "origin/$branch_name" >/dev/null 2>&1
    else
      echo "❌ $branch_name ブランチが見つかりません"
      exit 1
    fi
  else
    git checkout "$branch_name" >/dev/null 2>&1
  fi

  # Monitoring loop
  local check_count=0
  local max_checks=60
  local last_commit
  last_commit=$(git rev-parse HEAD)

  echo "🔄 監視開始..."
  echo "⏱️  30秒間隔でチェック"
  echo "🛑 Ctrl+C で停止"
  echo ""

  while [[ $check_count -lt $max_checks ]]; do
    ((check_count++))

    local dots=$(printf "%.0s." $(seq 1 $((check_count % 4))))
    printf "\r🔍 チェック中 %s [%d/%d]" "$dots" "$check_count" "$max_checks"

    # Fetch and check for changes
    git fetch origin "$branch_name" >/dev/null 2>&1
    local latest_commit
    latest_commit=$(git rev-parse "origin/$branch_name")

    if [[ "$latest_commit" != "$last_commit" ]]; then
      echo ""
      echo ""
      success "新しい変更を検出！"

      # Show what changed
      local new_files
      new_files=$(git diff --name-only "$last_commit".."$latest_commit" 2>/dev/null || echo "")

      if [[ -n "$new_files" ]]; then
        echo "📁 新しいファイル:"
        echo "$new_files" | head -10 | while read -r file; do
          echo "   ✨ $file"
        done

        local file_count
        file_count=$(echo "$new_files" | wc -l)
        if [[ $file_count -gt 10 ]]; then
          echo "   ... および $(($file_count - 10)) 個の追加ファイル"
        fi
        echo ""
      fi

      # Pull changes
      log "📥 変更を同期中..."
      git pull origin "$branch_name" >/dev/null 2>&1

      # Auto-install dependencies
      if [[ -f "package.json" ]]; then
        log "📦 依存関係をインストール中..."
        npm install >/dev/null 2>&1 && success "npm install 完了" || warning "npm install でエラー"
      fi

      if [[ -f "requirements.txt" ]]; then
        log "🐍 Python依存関係をインストール中..."
        pip install -r requirements.txt >/dev/null 2>&1 && success "pip install 完了" || warning "pip install でエラー"
      fi

      echo ""
      success "同期完了！"
      echo ""
      echo "🚀 開発を開始："
      echo "   📂 現在のディレクトリ: $PWD"
      if [[ -f "package.json" ]]; then
        echo "   🔥 開発サーバー: npm run dev"
      fi
      if [[ -f "app.py" || -f "main.py" ]]; then
        echo "   🐍 Pythonサーバー: python app.py"
      fi
      echo ""

      # Ask if user wants to open in editor
      echo "エディタで開きますか？"
      echo "1. Cursor"
      echo "2. VS Code"
      echo "3. いいえ"
      echo ""
      echo -n "選択 (1-3): "
      read -r editor_choice

      case $editor_choice in
        1)
          if command -v cursor >/dev/null 2>&1; then
            cursor . &
            success "Cursorで開きました"
          else
            warning "Cursorが見つかりません"
          fi
          ;;
        2)
          if command -v code >/dev/null 2>&1; then
            code . &
            success "VS Codeで開きました"
          else
            warning "VS Codeが見つかりません"
          fi
          ;;
      esac

      return 0
    fi

    sleep 30
  done

  echo ""
  warning "監視時間終了。変更は検出されませんでした。"
}

# Help function
show_help() {
  echo "🔄 Claude Project Sync - v$SCRIPT_VERSION"
  echo ""
  echo "使用方法:"
  echo "  ./sync_claude_project     # 現在のディレクトリで同期開始"
  echo "  ./sync_claude_project -h  # このヘルプを表示"
  echo ""
  echo "説明:"
  echo "  Claudeが生成したコードをリアルタイムでローカルに同期します。"
  echo "  30秒間隔でリモートリポジトリをチェックし、変更があれば自動で"
  echo "  プルして依存関係をインストールします。"
  echo ""
  echo "要件:"
  echo "  - Gitリポジトリ内で実行"
  echo "  - feat/initial-development ブランチが存在"
  echo "  - GitHubリモートリポジトリとの接続"
}

# Main execution
main() {
  if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    show_help
    exit 0
  fi

  sync_claude_project
}

main "$@"