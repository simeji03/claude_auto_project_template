#!/usr/bin/env bash
set -e

# üå∏ Professional-grade curl | bash safety with heredoc pattern
if [[ ! -t 0 ]] && [[ "${AUTO_SETUP_DIRECT_RUN:-}" != "1" ]]; then
  echo "üîÑ „Éë„Ç§„ÉóÂÆüË°åÔºàcurl | bashÔºâ„ÇíÊ§úÂá∫„Åó„Åæ„Åó„Åü„ÄÇÂÆâÂÖ®„É¢„Éº„Éâ„Å´Âàá„ÇäÊõø„Åà„Åæ„Åô..." >&2

  # Read the entire script into memory first
  SCRIPT_CONTENT=$(cat)

  # Execute with proper stdin
  env AUTO_SETUP_DIRECT_RUN=1 bash -c "$SCRIPT_CONTENT" < /dev/tty
  exit $?
fi

# üéØ Enterprise-grade logging and error handling
readonly LOG_FILE="/tmp/auto_setup_$(date +%s).log"
readonly SCRIPT_VERSION="2.2.0"
readonly REQUIRED_COMMANDS="git gh curl"
readonly CONFIG_FILE="$HOME/.claude_auto_project_config"

# Advanced error handling with rollback
readonly CLEANUP_STACK=()

# Add cleanup action to stack
add_cleanup() {
  local action="$1"
  CLEANUP_STACK+=("$action")
  log "„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó„Ç¢„ÇØ„Ç∑„Éß„É≥„ÇíËøΩÂä†: $action"
}

# Execute all cleanup actions
execute_cleanup() {
  log "‚ö†Ô∏è  „Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó„ÇíÂÆüË°å‰∏≠..."

  # Execute in reverse order
  for ((i=${#CLEANUP_STACK[@]}-1; i>=0; i--)); do
    local action="${CLEANUP_STACK[i]}"
    log "„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„ÉóÂÆüË°å: $action"
    eval "$action" || warning "„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó„Ç¢„ÇØ„Ç∑„Éß„É≥„ÅåÂ§±Êïó: $action"
  done

  CLEANUP_STACK=()
  log "„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü"
}

# Enhanced error function with rollback
error_with_rollback() {
  local message="$*"
  log "‚ùå „Ç®„É©„Éº: $message"
  execute_cleanup
  exit 1
}

# Trap for automatic cleanup on exit
trap 'execute_cleanup' ERR EXIT

# Configuration management
load_config() {
  if [[ -f "$CONFIG_FILE" ]]; then
    source "$CONFIG_FILE" 2>/dev/null || true
  fi
}

save_config() {
  cat > "$CONFIG_FILE" << EOF
# Claude Auto Project Template Configuration
# Last updated: $(date)

# Recent custom paths (most recent first)
RECENT_CUSTOM_PATHS=(
$(printf '  "%s"\n' "${RECENT_CUSTOM_PATHS[@]}")
)

# User preferences
DEFAULT_PROJECT_LOCATION="${DEFAULT_PROJECT_LOCATION:-}"
PREFERRED_LICENSE="${PREFERRED_LICENSE:-MIT}"
DEFAULT_VISIBILITY="${DEFAULT_VISIBILITY:-private}"

# Project statistics
PROJECT_COUNT=${PROJECT_COUNT:-0}
LAST_PROJECT_DATE="${LAST_PROJECT_DATE:-}"
LAST_PROJECT_NAME="${LAST_PROJECT_NAME:-}"
TOTAL_PRIVATE_REPOS=${TOTAL_PRIVATE_REPOS:-0}
TOTAL_PUBLIC_REPOS=${TOTAL_PUBLIC_REPOS:-0}

# Template usage statistics
$(declare -p TEMPLATE_STATS 2>/dev/null || echo "declare -A TEMPLATE_STATS=()")
EOF
  success "Ë®≠ÂÆö„Åå‰øùÂ≠ò„Åï„Çå„Åæ„Åó„Åü: $CONFIG_FILE"
}

# Add custom path to recent list
add_recent_path() {
  local new_path="$1"
  local updated_paths=()

  # Add new path first
  updated_paths+=("$new_path")

  # Add existing paths (except duplicates, max 5)
  local count=1
  for path in "${RECENT_CUSTOM_PATHS[@]}"; do
    if [[ "$path" != "$new_path" ]] && [[ $count -lt 5 ]]; then
      updated_paths+=("$path")
      ((count++))
    fi
  done

  RECENT_CUSTOM_PATHS=("${updated_paths[@]}")
}

# Logging functions
log() {
  echo "[$(date '+%Y-%m-%d %H:%M:%S')] $*" | tee -a "$LOG_FILE" >&2
}

error() {
  log "‚ùå „Ç®„É©„Éº: $*"
  exit 1
}

success() {
  log "‚úÖ ÊàêÂäü: $*"
}

warning() {
  log "‚ö†Ô∏è  Ë≠¶Âëä: $*"
}

# Retry function for critical operations
retry() {
  local max_attempts="$1"
  local delay="$2"
  shift 2
  local cmd="$*"

  for ((i=1; i<=max_attempts; i++)); do
    log "Ë©¶Ë°å $i/$max_attempts: $cmd"
    if eval "$cmd"; then
      return 0
    else
      if [[ $i -lt $max_attempts ]]; then
        warning "„Ç≥„Éû„É≥„Éâ„ÅåÂ§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ${delay}ÁßíÂæå„Å´„É™„Éà„É©„Ç§„Åó„Åæ„Åô..."
        sleep "$delay"
      else
        error "„Ç≥„Éû„É≥„Éâ„Åå$max_attemptsÂõûË©¶Ë°åÂæå„ÇÇÂ§±Êïó„Åó„Åæ„Åó„Åü: $cmd"
      fi
    fi
  done
}

# Comprehensive prerequisites check
check_prerequisites() {
  log "üîç ÂâçÊèêÊù°‰ª∂„Çí„ÉÅ„Çß„ÉÉ„ÇØ‰∏≠..."

  # Check required commands
  for cmd in $REQUIRED_COMMANDS; do
    if ! command -v "$cmd" >/dev/null 2>&1; then
      error "ÂøÖË¶Å„Å™„Ç≥„Éû„É≥„Éâ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì: $cmd"
    fi
  done

  # Check GitHub CLI authentication
  if ! gh auth status >/dev/null 2>&1; then
    error "GitHub CLI„ÅåË™çË®º„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ‰ª•‰∏ã„ÇíÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ: gh auth login --scopes repo,workflow"
  fi

  # Get GitHub username
  GH_USERNAME=$(gh api user --jq .login 2>/dev/null) || error "GitHub„É¶„Éº„Ç∂„ÉºÂêç„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü"
  log "GitHub„É¶„Éº„Ç∂„Éº: $GH_USERNAME"

  # Check GitHub token permissions
  local token_output
  token_output=$(gh auth status 2>&1)

  log "üîç GitHub„Éà„Éº„ÇØ„É≥ÊÉÖÂ†±„Çí„ÉÅ„Çß„ÉÉ„ÇØ‰∏≠..."

  for required_scope in "repo" "workflow"; do
    if ! echo "$token_output" | grep -q "$required_scope"; then
      error "ÂøÖË¶Å„Å™GitHub„Éà„Éº„ÇØ„É≥„Çπ„Ç≥„Éº„Éó„Åå‰∏çË∂≥„Åó„Å¶„ÅÑ„Åæ„Åô: $required_scope

üîß Ëß£Ê±∫ÊñπÊ≥ï:
‰ª•‰∏ã„ÅÆ„Ç≥„Éû„É≥„Éâ„ÇíÂÆüË°å„Åó„Å¶ÂÜçË™çË®º„Åó„Å¶„Åè„Å†„Åï„ÅÑ:
gh auth login --scopes repo,workflow

üîç ÁèæÂú®„ÅÆË™çË®ºÊÉÖÂ†±:
$token_output"
    fi
  done

  # Check ANTHROPIC_API_KEY
  if [[ -z "$ANTHROPIC_API_KEY" ]]; then
    error "Áí∞Â¢ÉÂ§âÊï∞ ANTHROPIC_API_KEY „ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ~/.zshrc „Å´Ë®≠ÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ

üîß Ë®≠ÂÆöÊñπÊ≥ï:
echo 'export ANTHROPIC_API_KEY=\"your-api-key-here\"' >> ~/.zshrc
source ~/.zshrc"
  fi

  if [[ ${#ANTHROPIC_API_KEY} -lt 50 ]]; then
    error "ANTHROPIC_API_KEY „ÅåÁÑ°Âäπ„Åß„ÅôÔºàÁü≠„Åô„Åé„Åæ„ÅôÔºâ"
  fi

  success "„Åô„Åπ„Å¶„ÅÆÂâçÊèêÊù°‰ª∂„ÅåÁ¢∫Ë™ç„Åï„Çå„Åæ„Åó„Åü"
}

# Enhanced project name validation
validate_project_name() {
  local name="$1"

  # Empty check
  if [[ -z "$name" ]]; then
    return 1
  fi

  # Pattern check (alphanumeric, hyphens, underscores only)
  if [[ ! "$name" =~ ^[a-zA-Z0-9_-]+$ ]]; then
    return 1
  fi

  # Start/end character check
  if [[ "$name" =~ ^[-_] ]] || [[ "$name" =~ [-_]$ ]]; then
    return 1
  fi

  # Length check (GitHub limit: 100, but we use 39 for safety)
  if [[ ${#name} -gt 39 ]] || [[ ${#name} -lt 3 ]]; then
    return 1
  fi

  # Reserved names check
  local reserved_names="aux con prn nul com1 com2 com3 com4 com5 com6 com7 com8 com9 lpt1 lpt2 lpt3 lpt4 lpt5 lpt6 lpt7 lpt8 lpt9"
  if echo "$reserved_names" | grep -qi "\b$name\b"; then
    return 1
  fi

  return 0
}

# Robust project name input
get_project_name() {
  local project_name=""
  local attempts=0
  local max_attempts=5

  while [[ $attempts -lt $max_attempts ]]; do
    echo -n "Êñ∞„Åó„ÅÑ„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÂêç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºàËã±Êï∞Â≠ó„Éª„Éè„Ç§„Éï„É≥„Éª„Ç¢„É≥„ÉÄ„Éº„Çπ„Ç≥„Ç¢„ÄÅ3-39ÊñáÂ≠óÔºâ: " >&2
    read project_name

    if validate_project_name "$project_name"; then
      log "„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÂêç„ÅåÊ§úË®º„Åï„Çå„Åæ„Åó„Åü: $project_name"
      echo "$project_name"
      return 0
    else
      ((attempts++))
      warning "ÁÑ°Âäπ„Å™„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÂêç„Åß„Åô: '$project_name'"
      echo "   - Ëã±Êï∞Â≠ó„Éª„Éè„Ç§„Éï„É≥„Éª„Ç¢„É≥„ÉÄ„Éº„Çπ„Ç≥„Ç¢„ÅÆ„Åø‰ΩøÁî®ÂèØËÉΩ" >&2
      echo "   - 3-39ÊñáÂ≠ó„ÅÆÈï∑„Åï" >&2
      echo "   - „Éè„Ç§„Éï„É≥„Éª„Ç¢„É≥„ÉÄ„Éº„Çπ„Ç≥„Ç¢„ÅßÂßã„Åæ„Å£„Åü„ÇäÁµÇ„Çè„Å£„Åü„Çä„Åó„Å™„ÅÑ" >&2
      echo "   - „Ç∑„Çπ„ÉÜ„É†‰∫àÁ¥ÑË™û„ÅØ‰ΩøÁî®‰∏çÂèØ" >&2

      if [[ $attempts -eq $max_attempts ]]; then
        error "„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÂêç„ÅÆË©¶Ë°åÂõûÊï∞„Åå‰∏äÈôê„Å´ÈÅî„Åó„Åæ„Åó„Åü"
      fi
    fi
  done
}

# Check for existing conflicts
check_conflicts() {
  local project_name="$1"
  local project_dir="$2"

  # Check local directory
  if [[ -d "$project_dir/$project_name" ]]; then
    error "„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅåÊó¢„Å´Â≠òÂú®„Åó„Åæ„Åô: $project_dir/$project_name"
  fi

  # Check GitHub repository
  if gh repo view "$GH_USERNAME/$project_name" >/dev/null 2>&1; then
    error "GitHub„É™„Éù„Ç∏„Éà„É™„ÅåÊó¢„Å´Â≠òÂú®„Åó„Åæ„Åô: $GH_USERNAME/$project_name"
  fi

  success "„Éó„É≠„Ç∏„Çß„ÇØ„Éà '$project_name' „Å´Á´∂Âêà„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì"
}

# Create and setup local project
setup_local_project() {
  local project_name="$1"
  local project_dir="$2/$project_name"

  log "„É≠„Éº„Ç´„É´„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Éá„Ç£„É¨„ÇØ„Éà„É™„Çí‰ΩúÊàê‰∏≠..."
  mkdir -p "$project_dir" || error "„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅÆ‰ΩúÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü"
  cd "$project_dir" || error "„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Éá„Ç£„É¨„ÇØ„Éà„É™„Å∏„ÅÆÁßªÂãï„Å´Â§±Êïó„Åó„Åæ„Åó„Åü"

  log "Git„É™„Éù„Ç∏„Éà„É™„ÇíÂàùÊúüÂåñ‰∏≠..."
  git init -b main >/dev/null 2>&1 || error "Git„É™„Éù„Ç∏„Éà„É™„ÅÆÂàùÊúüÂåñ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü"

  log "ÂàùÊúüREADME„Çí‰ΩúÊàê‰∏≠..."
  cat > README.md << EOF
# $project_name

Claude Code ActionÁµ±Âêà„Å´„Çà„ÇäËá™ÂãïÁîüÊàê„Åï„Çå„Åü„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Åß„Åô„ÄÇ

## „ÅØ„Åò„ÇÅ„Å´

„Åì„ÅÆ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅØClaude Auto Project Template„Åß„Éñ„Éº„Éà„Çπ„Éà„É©„ÉÉ„Éó„Åï„Çå„Åæ„Åó„Åü„ÄÇ

## ÈñãÁô∫ÊâãÈ†Ü

1. „Ç≥„Éº„Éâ„ÇíÂ§âÊõ¥
2. „Éó„É´„É™„ÇØ„Ç®„Çπ„Éà„Çí‰ΩúÊàê
3. „Ç≥„É°„É≥„Éà„Åß \`@claude\` „ÇíÂëº„Å≥Âá∫„Åó„Å¶AI„Çµ„Éù„Éº„Éà„ÇíÂèó„Åë„Çã
4. Claude„Å®‰∏ÄÁ∑í„Å´Á¥†Êô¥„Çâ„Åó„ÅÑÊ©üËÉΩ„ÇíÊßãÁØâÔºÅ

## Ê©üËÉΩ

- ü§ñ Claude AIÁµ±Âêà
- üöÄ Ëá™ÂãïÂåñ„ÉØ„Éº„ÇØ„Éï„É≠„Éº
- üìù „Çπ„Éû„Éº„Éà„Å™„Ç≥„Éº„ÉâÁîüÊàê
- üîÑ Á∂ôÁ∂öÁöÑÊîπÂñÑ

---

ÁîüÊàêÊó•: $(date)
EOF

  log "Claude„ÉØ„Éº„ÇØ„Éï„É≠„Éº„ÇíË®≠ÂÆö‰∏≠..."
  mkdir -p .github/workflows

  cat > .github/workflows/claude.yml << 'EOF'
name: Claude Code Action

on:
  issue_comment:
    types: [created]

jobs:
  claude:
    if: contains(github.event.comment.body, '/claude') || contains(github.event.comment.body, '@claude')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      - name: Claude Code Action
        uses: anthropics/claude-code-action@v0.0.7
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          trigger_phrase: '@claude'
          github_token: ${{ secrets.GITHUB_TOKEN }}
EOF

  success "„É≠„Éº„Ç´„É´„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅÆ„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü"
}

# Create GitHub repository with robust error handling
create_github_repo() {
  local project_name="$1"
  local visibility="$2"

  log "GitHub„É™„Éù„Ç∏„Éà„É™„Çí‰ΩúÊàê‰∏≠..."

  # Create repository with retry
  local visibility_flag=""
  if [[ "$visibility" == "public" ]]; then
    visibility_flag="--public"
  else
    visibility_flag="--private"
  fi

  retry 3 2 "gh repo create '$project_name' $visibility_flag --clone=false --description 'ClaudeÁµ±Âêà„Å´„Çà„ÇäËá™ÂãïÁîüÊàê„Åï„Çå„Åü„Éó„É≠„Ç∏„Çß„ÇØ„Éà'"

  # Add remote
  retry 3 1 "git remote add origin https://github.com/$GH_USERNAME/$project_name.git"

  # Verify remote was added
  if ! git remote get-url origin >/dev/null 2>&1; then
    error "„É™„É¢„Éº„Éàorigin„ÅÆËøΩÂä†„Å´Â§±Êïó„Åó„Åæ„Åó„Åü"
  fi

  success "GitHub„É™„Éù„Ç∏„Éà„É™„Åå‰ΩúÊàê„Åï„Çå„Åæ„Åó„Åü: $GH_USERNAME/$project_name ($visibility)"
}

# Setup GitHub secrets
setup_github_secrets() {
  local project_name="$1"

  log "GitHub„Ç∑„Éº„ÇØ„É¨„ÉÉ„Éà„ÇíË®≠ÂÆö‰∏≠..."

  # Set ANTHROPIC_API_KEY secret
  retry 3 2 "gh secret set ANTHROPIC_API_KEY -b'$ANTHROPIC_API_KEY' -R '$GH_USERNAME/$project_name'"

  # Verify secret was set
  if ! gh secret list -R "$GH_USERNAME/$project_name" | grep -q "ANTHROPIC_API_KEY"; then
    error "ANTHROPIC_API_KEY„Ç∑„Éº„ÇØ„É¨„ÉÉ„Éà„ÅÆÁ¢∫Ë™ç„Å´Â§±Êïó„Åó„Åæ„Åó„Åü"
  fi

  success "GitHub„Ç∑„Éº„ÇØ„É¨„ÉÉ„Éà„ÅåË®≠ÂÆö„Åï„Çå„Åæ„Åó„Åü"
}

# Commit and push with robust handling
commit_and_push() {
  local project_name="$1"

  log "ÂàùÊúü„Éï„Ç°„Ç§„É´„Çí„Ç≥„Éü„ÉÉ„Éà‰∏≠..."
  git add . || error "„Éï„Ç°„Ç§„É´„ÅÆgit add„Å´Â§±Êïó„Åó„Åæ„Åó„Åü"
  git commit -m "chore: $project_name „ÇíClaudeÁµ±Âêà„Åß„Éñ„Éº„Éà„Çπ„Éà„É©„ÉÉ„Éó

- „Éó„É≠„Ç∏„Çß„ÇØ„ÉàË™¨Êòé‰ªò„ÅçREADME„ÇíËøΩÂä†
- Claude Code Action„ÉØ„Éº„ÇØ„Éï„É≠„Éº„ÇíË®≠ÂÆö
- Ëá™ÂãïÂåñÈñãÁô∫Áí∞Â¢É„Çí„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó
- AIÊîØÊè¥ÈñãÁô∫„ÅÆÊ∫ñÂÇôÂÆå‰∫Ü" >/dev/null 2>&1 || error "„Éï„Ç°„Ç§„É´„ÅÆ„Ç≥„Éü„ÉÉ„Éà„Å´Â§±Êïó„Åó„Åæ„Åó„Åü"

  log "GitHub„Å´„Éó„ÉÉ„Ç∑„É•‰∏≠..."
  retry 5 3 "git push -u origin main"

  success "„Ç≥„Éº„Éâ„Ååmain„Éñ„É©„É≥„ÉÅ„Å´„Éó„ÉÉ„Ç∑„É•„Åï„Çå„Åæ„Åó„Åü"
}

# Create feature branch and PR
create_feature_pr() {
  local project_name="$1"

  log "„Éï„Ç£„Éº„ÉÅ„É£„Éº„Éñ„É©„É≥„ÉÅ„Çí‰ΩúÊàê‰∏≠..."
  git checkout -b feat/initial-development >/dev/null 2>&1 || error "„Éï„Ç£„Éº„ÉÅ„É£„Éº„Éñ„É©„É≥„ÉÅ„ÅÆ‰ΩúÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü"

  # Add a placeholder file to trigger PR
  cat >> README.md << EOF

## Ê¨°„ÅÆ„Çπ„ÉÜ„ÉÉ„Éó

ÈñãÁô∫Ê∫ñÂÇôÂÆå‰∫ÜÔºÅPR„Ç≥„É°„É≥„Éà„Åß@claude„Çí‰ΩøÁî®„Åó„Å¶ÈñãÁô∫„ÇíÈñãÂßã„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ

<!-- ÈñãÁô∫„Éó„É¨„Éº„Çπ„Éõ„É´„ÉÄ„Éº -->
EOF

  git add README.md || error "READMEÂ§âÊõ¥„ÅÆadd„Å´Â§±Êïó„Åó„Åæ„Åó„Åü"
  git commit -m "feat: ÂàùÊúüÈñãÁô∫„ÅÆÊ∫ñÂÇô

- ÈñãÁô∫„Éó„É¨„Éº„Çπ„Éõ„É´„ÉÄ„Éº„ÇíËøΩÂä†
- ClaudeÊîØÊè¥„ÅÆÊ∫ñÂÇôÂÆå‰∫Ü
- ÊúÄÂàù„ÅÆPR„ÉØ„Éº„ÇØ„Éï„É≠„Éº„Çí„Éà„É™„Ç¨„Éº" >/dev/null 2>&1 || error "„Éï„Ç£„Éº„ÉÅ„É£„ÉºÂ§âÊõ¥„ÅÆ„Ç≥„Éü„ÉÉ„Éà„Å´Â§±Êïó„Åó„Åæ„Åó„Åü"

  retry 3 2 "git push -u origin feat/initial-development"

  log "„Éó„É´„É™„ÇØ„Ç®„Çπ„Éà„Çí‰ΩúÊàê‰∏≠..."
  local pr_url
  pr_url=$(retry 3 2 "gh pr create --title 'feat: ÂàùÊúüÈñãÁô∫„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó' --body '$project_name „ÅÆÂàùÊúü„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó

## Claude„ÅÆÊ∫ñÂÇôÂÆå‰∫ÜÔºÅ

„Åì„ÅÆPR„ÅØ„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÊßãÈÄ†„Çí„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó„Åó„ÄÅAIÊîØÊè¥ÈñãÁô∫„ÅÆÊ∫ñÂÇô„ÅåÊï¥„ÅÑ„Åæ„Åó„Åü„ÄÇ

### Ê¨°„Å´„Åô„Çã„Åì„Å®:
1. \`@claude Á∞°Âçò„Å™Ëá™ÂãïËøî‰ø°„Ç¢„Éó„É™„ÇíÊßãÁØâ„Åó„Å¶„Åè„Å†„Åï„ÅÑ\` „Å®„Ç≥„É°„É≥„Éà
2. Claude„Å´Ëá™ÂãïÁöÑ„Å´„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÇíÊßãÁØâ„Åó„Å¶„ÇÇ„Çâ„ÅÜ
3. ÁîüÊàê„Åï„Çå„Åü„Ç≥„Éº„Éâ„Çí„É¨„Éì„É•„Éº„Åó„Å¶ÊîπËâØ

„Éè„ÉÉ„Éî„Éº„Ç≥„Éº„Éá„Ç£„É≥„Ç∞ÔºÅ üöÄ' --head feat/initial-development --base main") || error "„Éó„É´„É™„ÇØ„Ç®„Çπ„Éà„ÅÆ‰ΩúÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü"

  success "„Éó„É´„É™„ÇØ„Ç®„Çπ„Éà„Åå‰ΩúÊàê„Åï„Çå„Åæ„Åó„Åü: $pr_url"
  return 0
}

# Trigger Claude automatically
trigger_claude() {
  local project_name="$1"
  local template="$2"
  local license="$3"

  log "Claude„ÅÆËá™Âãï„Ç≥„Éº„ÉâÁîüÊàê„Çí„Éà„É™„Ç¨„Éº‰∏≠..."

  # Get PR number
  local pr_number
  pr_number=$(gh pr view feat/initial-development --json number --jq .number 2>/dev/null) || error "PRÁï™Âè∑„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü"

  # Generate template-specific instructions
  local template_instructions=""
  case $template in
    "react-typescript")
      template_instructions="
## ÊäÄË°ìË¶Å‰ª∂
- React 18+ with TypeScript
- Vite for build tool
- ESLint + Prettier configuration
- React Router for navigation
- Styled-components or Tailwind CSS
- Jest + React Testing Library for testing"
      ;;
    "nodejs-express")
      template_instructions="
## ÊäÄË°ìË¶Å‰ª∂
- Node.js with Express.js
- TypeScript configuration
- ESLint + Prettier setup
- Jest for testing
- Docker configuration
- API documentation with Swagger"
      ;;
    "python-fastapi")
      template_instructions="
## ÊäÄË°ìË¶Å‰ª∂
- Python 3.8+ with FastAPI
- Poetry for dependency management
- Pydantic for data validation
- pytest for testing
- uvicorn for ASGI server
- Docker configuration"
      ;;
    "nextjs-typescript")
      template_instructions="
## ÊäÄË°ìË¶Å‰ª∂
- Next.js 14+ with TypeScript
- Tailwind CSS for styling
- ESLint + Prettier configuration
- Jest + Testing Library
- Vercel deployment ready"
      ;;
    "vuejs-typescript")
      template_instructions="
## ÊäÄË°ìË¶Å‰ª∂
- Vue.js 3+ with TypeScript
- Vite for build tool
- Vue Router + Pinia
- Vitest for testing
- ESLint + Prettier setup"
      ;;
    "custom")
      template_instructions="
## ÊäÄË°ìË¶Å‰ª∂
- ÊúÄÈÅ©„Å™ÊäÄË°ì„Çπ„Çø„ÉÉ„ÇØ„ÇíÊèêÊ°à„Åó„Å¶„Åè„Å†„Åï„ÅÑ
- „É¢„ÉÄ„É≥„Å™„Éô„Çπ„Éà„Éó„É©„ÇØ„ÉÜ„Ç£„Çπ„ÇíÈÅ©Áî®
- ÂÆåÂÖ®„Å™„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÊßãÈÄ†„Çí‰ΩúÊàê"
      ;;
    *)
      template_instructions="
## ÊäÄË°ìË¶Å‰ª∂
- „Ç∑„É≥„Éó„É´„ÅßÂàÜ„Åã„Çä„ÇÑ„Åô„ÅÑ„Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£
- „É¢„ÉÄ„É≥„Å™„Éô„Çπ„Éà„Éó„É©„ÇØ„ÉÜ„Ç£„Çπ
- ÈÅ©Âàá„Å™„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÊßãÈÄ†"
      ;;
  esac

  local license_note=""
  if [[ "$license" != "none" ]]; then
    license_note="
## „É©„Ç§„Çª„É≥„Çπ
- $license „É©„Ç§„Çª„É≥„Çπ„Éï„Ç°„Ç§„É´„Çí‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
  fi

  # Post Claude comment
  retry 3 2 "gh api repos/$GH_USERNAME/$project_name/issues/$pr_number/comments -f body='@claude ‰ª•‰∏ã„ÅÆË¶Å‰ª∂„ÅßÂÆåÂÖ®„Å™„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÇíÊßãÁØâ„Åó„Å¶„Åè„Å†„Åï„ÅÑ:

## „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÊ¶ÇË¶Å
„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÂêç: $project_name
„ÉÜ„É≥„Éó„É¨„Éº„Éà: $template

$template_instructions

## Âü∫Êú¨Ë¶Å‰ª∂
- Ëá™ÂãïËøî‰ø°Ê©üËÉΩ„Åæ„Åü„ÅØ„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÂõ∫Êúâ„ÅÆÊ©üËÉΩ
- „É¢„ÉÄ„É≥„Å™UI/UX
- ÈÅ©Âàá„Å™„Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞
- ÂåÖÊã¨ÁöÑ„Å™„Éâ„Ç≠„É•„É°„É≥„Éà
- Âçò‰Ωì„ÉÜ„Çπ„Éà
- Êú¨Áï™ÂØæÂøú„ÅÆË®≠ÂÆö

$license_note

## ÂìÅË≥™Ë¶Å‰ª∂
- TypeScript„Çí‰ΩøÁî®ÔºàË©≤ÂΩì„Åô„ÇãÂ†¥ÂêàÔºâ
- ESLint/PrettierË®≠ÂÆö
- CI/CD ready
- DockerÂØæÂøúÔºàË©≤ÂΩì„Åô„ÇãÂ†¥ÂêàÔºâ
- Ë©≥Á¥∞„Å™README

ÂÆåÂÖ®„Å™Êú¨Áï™ÂØæÂøú„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„Çí‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ„Çà„Çç„Åó„Åè„ÅäÈ°ò„ÅÑ„Åó„Åæ„ÅôÔºÅ'"

  success "Claude„ÅåÊ≠£Â∏∏„Å´„Éà„É™„Ç¨„Éº„Åï„Çå„Åæ„Åó„ÅüÔºÅPR„ÅßËá™Âãï„Ç≥„Éº„ÉâÁîüÊàê„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ"
}

# Get project directory preference
get_project_directory() {
  echo "" >&2
  echo "üìÅ „Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅÆ‰ΩúÊàêÂ†¥ÊâÄ„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ:" >&2
  echo "1. ~/Projects/ (Êé®Â•®)" >&2
  echo "2. ~/Desktop/" >&2
  echo "3. ~/Documents/" >&2
  echo "4. ÁèæÂú®„ÅÆ„Éá„Ç£„É¨„ÇØ„Éà„É™ ($PWD)" >&2

  # Show recent custom paths if available
  local option_count=5
  if [[ ${#RECENT_CUSTOM_PATHS[@]} -gt 0 ]]; then
    echo "--- ÊúÄËøë‰ΩøÁî®„Åó„Åü„Ç´„Çπ„Çø„É†„Éë„Çπ ---" >&2
    local i=0
    for path in "${RECENT_CUSTOM_PATHS[@]}"; do
      if [[ $i -lt 3 ]]; then  # Show max 3 recent paths
        echo "$option_count. $path" >&2
        ((option_count++))
        ((i++))
      fi
    done
    echo "--- ---" >&2
  fi

  echo "$option_count. Êñ∞„Åó„ÅÑ„Ç´„Çπ„Çø„É†„Éë„Çπ" >&2
  local custom_option=$option_count
  echo "" >&2

  local choice=""
  while true; do
    echo -n "ÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ (1-$option_count): " >&2
    read choice

    case $choice in
      1)
        echo "$HOME/Projects"
        return 0
        ;;
      2)
        echo "$HOME/Desktop"
        return 0
        ;;
      3)
        echo "$HOME/Documents"
        return 0
        ;;
      4)
        echo "$PWD"
        return 0
        ;;
      5|6|7)
        # Check if it's a recent custom path
        local recent_index=$((choice - 5))
        if [[ $recent_index -lt ${#RECENT_CUSTOM_PATHS[@]} ]]; then
          local selected_path="${RECENT_CUSTOM_PATHS[$recent_index]}"
          if [[ -d "$selected_path" ]] || mkdir -p "$selected_path" 2>/dev/null; then
            echo "$selected_path"
            return 0
          else
            warning "„Éë„Çπ„Å´„Ç¢„ÇØ„Çª„Çπ„Åß„Åç„Åæ„Åõ„Çì: $selected_path"
          fi
        elif [[ $choice -eq $custom_option ]]; then
          # New custom path
          echo -n "Êñ∞„Åó„ÅÑ„Ç´„Çπ„Çø„É†„Éë„Çπ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ: " >&2
          read custom_path

          # Expand tilde
          custom_path="${custom_path/#\~/$HOME}"

          if [[ -z "$custom_path" ]]; then
            warning "„Éë„Çπ„ÅåÂÖ•Âäõ„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ"
            continue
          fi

          if [[ -d "$custom_path" ]] || mkdir -p "$custom_path" 2>/dev/null; then
            add_recent_path "$custom_path"
            save_config
            success "„Ç´„Çπ„Çø„É†„Éë„Çπ„Çí‰øùÂ≠ò„Åó„Åæ„Åó„Åü: $custom_path"
            echo "$custom_path"
            return 0
          else
            warning "ÁÑ°Âäπ„Å™„Éë„Çπ„Åæ„Åü„ÅØ‰ΩúÊàê„Åß„Åç„Åæ„Åõ„Çì: $custom_path"
          fi
        fi
        ;;
      *)
        warning "ÁÑ°Âäπ„Å™ÈÅ∏Êäû„Åß„Åô„ÄÇ1-$option_count „ÅÆÊï∞Â≠ó„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ"
        ;;
    esac
  done
}

# Project template selection
get_project_template() {
  echo "" >&2
  echo "üé® „Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÉÜ„É≥„Éó„É¨„Éº„Éà„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ:" >&2
  echo "1. Vanilla (Âü∫Êú¨„ÉÜ„É≥„Éó„É¨„Éº„Éà)" >&2
  echo "2. React + TypeScript" >&2
  echo "3. Node.js + Express" >&2
  echo "4. Python + FastAPI" >&2
  echo "5. Next.js + TypeScript" >&2
  echo "6. Vue.js + TypeScript" >&2
  echo "7. „Ç´„Çπ„Çø„É†ÔºàClaude„Å´Áõ∏Ë´áÔºâ" >&2
  echo "" >&2

  local choice=""
  while true; do
    echo -n "ÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ (1-7): " >&2
    read choice

    case $choice in
      1)
        echo "vanilla"
        return 0
        ;;
      2)
        echo "react-typescript"
        return 0
        ;;
      3)
        echo "nodejs-express"
        return 0
        ;;
      4)
        echo "python-fastapi"
        return 0
        ;;
      5)
        echo "nextjs-typescript"
        return 0
        ;;
      6)
        echo "vuejs-typescript"
        return 0
        ;;
      7)
        echo "custom"
        return 0
        ;;
      *)
        warning "ÁÑ°Âäπ„Å™ÈÅ∏Êäû„Åß„Åô„ÄÇ1-7„ÅÆÊï∞Â≠ó„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ"
        ;;
    esac
  done
}

# License selection
get_project_license() {
  echo "" >&2
  echo "üìÑ „É©„Ç§„Çª„É≥„Çπ„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ:" >&2
  echo "1. MIT (Êé®Â•® - ÊúÄ„ÇÇËá™Áî±Â∫¶„ÅåÈ´ò„ÅÑ)" >&2
  echo "2. Apache 2.0 (ÁâπË®±‰øùË≠∑‰ªò„Åç)" >&2
  echo "3. GPL v3 („Ç≥„Éî„Éº„É¨„Éï„Éà)" >&2
  echo "4. BSD 3-Clause" >&2
  echo "5. ISC" >&2
  echo "6. Unlicense („Éë„Éñ„É™„ÉÉ„ÇØ„Éâ„É°„Ç§„É≥)" >&2
  echo "7. „É©„Ç§„Çª„É≥„Çπ„Å™„Åó" >&2
  echo "" >&2

  local choice="${PREFERRED_LICENSE:-1}"
  echo -n "ÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ (1-7) [„Éá„Éï„Ç©„É´„Éà: $choice]: " >&2
  read user_choice

  choice="${user_choice:-$choice}"

  case $choice in
    1|"MIT")
      echo "MIT"
      return 0
      ;;
    2|"Apache")
      echo "Apache-2.0"
      return 0
      ;;
    3|"GPL")
      echo "GPL-3.0"
      return 0
      ;;
    4|"BSD")
      echo "BSD-3-Clause"
      return 0
      ;;
    5|"ISC")
      echo "ISC"
      return 0
      ;;
    6|"Unlicense")
      echo "Unlicense"
      return 0
      ;;
    7|"none")
      echo "none"
      return 0
      ;;
    *)
      warning "ÁÑ°Âäπ„Å™ÈÅ∏Êäû„Åß„Åô„ÄÇMIT„É©„Ç§„Çª„É≥„Çπ„Çí‰ΩøÁî®„Åó„Åæ„Åô„ÄÇ"
      echo "MIT"
      return 0
      ;;
  esac
}

# Repository visibility selection
get_repository_visibility() {
  echo "" >&2
  echo "üîí „É™„Éù„Ç∏„Éà„É™„ÅÆÂèØË¶ñÊÄß„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ:" >&2
  echo "1. Private (ÈùûÂÖ¨Èñã - Êé®Â•®)" >&2
  echo "2. Public (ÂÖ¨Èñã)" >&2
  echo "" >&2

  local choice="${DEFAULT_VISIBILITY:-private}"
  if [[ "$choice" == "private" ]]; then
    local default_num="1"
  else
    local default_num="2"
  fi

  echo -n "ÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ (1-2) [„Éá„Éï„Ç©„É´„Éà: $default_num]: " >&2
  read user_choice

  user_choice="${user_choice:-$default_num}"

  case $user_choice in
    1|"private")
      echo "private"
      return 0
      ;;
    2|"public")
      echo "public"
      return 0
      ;;
    *)
      warning "ÁÑ°Âäπ„Å™ÈÅ∏Êäû„Åß„Åô„ÄÇPrivate„Çí‰ΩøÁî®„Åó„Åæ„Åô„ÄÇ"
      echo "private"
      return 0
      ;;
  esac
}

# Update project statistics
update_project_stats() {
  local project_name="$1"
  local template="$2"
  local license="$3"
  local visibility="$4"

  # Initialize stats if not exists
  if [[ -z "$PROJECT_COUNT" ]]; then
    PROJECT_COUNT=0
  fi

  if [[ -z "$TEMPLATE_STATS" ]]; then
    declare -A TEMPLATE_STATS
  fi

  # Update counters
  ((PROJECT_COUNT++))
  TEMPLATE_STATS["$template"]=$((${TEMPLATE_STATS["$template"]:-0} + 1))
  LAST_PROJECT_DATE=$(date '+%Y-%m-%d %H:%M:%S')
  LAST_PROJECT_NAME="$project_name"

  # Update total stats
  TOTAL_PRIVATE_REPOS=$((${TOTAL_PRIVATE_REPOS:-0} + $([ "$visibility" = "private" ] && echo 1 || echo 0)))
  TOTAL_PUBLIC_REPOS=$((${TOTAL_PUBLIC_REPOS:-0} + $([ "$visibility" = "public" ] && echo 1 || echo 0)))

  success "„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÁµ±Ë®à„ÇíÊõ¥Êñ∞„Åó„Åæ„Åó„Åü (Á∑èË®à: $PROJECT_COUNT „Éó„É≠„Ç∏„Çß„ÇØ„Éà)"
}

# Show project statistics
show_project_stats() {
  if [[ "$PROJECT_COUNT" -gt 0 ]]; then
    echo "" >&2
    echo "üìä „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÁµ±Ë®à:" >&2
    echo "   Á∑è„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÊï∞: $PROJECT_COUNT" >&2
    echo "   ÊúÄÊñ∞„Éó„É≠„Ç∏„Çß„ÇØ„Éà: $LAST_PROJECT_NAME ($LAST_PROJECT_DATE)" >&2
    echo "   „Éó„É©„Ç§„Éô„Éº„Éà„É™„Éù„Ç∏„Éà„É™: ${TOTAL_PRIVATE_REPOS:-0}" >&2
    echo "   „Éë„Éñ„É™„ÉÉ„ÇØ„É™„Éù„Ç∏„Éà„É™: ${TOTAL_PUBLIC_REPOS:-0}" >&2

    if [[ ${#TEMPLATE_STATS[@]} -gt 0 ]]; then
      echo "   ‰ΩøÁî®„ÉÜ„É≥„Éó„É¨„Éº„Éà:" >&2
      for template in "${!TEMPLATE_STATS[@]}"; do
        echo "     - $template: ${TEMPLATE_STATS[$template]} Âõû" >&2
      done
    fi
    echo "" >&2
  fi
}

# Enhanced validation with detailed error messages
validate_environment() {
  log "üîç Áí∞Â¢ÉÊ§úË®º„ÇíÂÆüË°å‰∏≠..."

  # Check disk space (require at least 100MB)
  local available_space
  available_space=$(df "$PWD" | tail -1 | awk '{print $4}')
  if [[ $available_space -lt 102400 ]]; then  # 100MB in KB
    error_with_rollback "„Éá„Ç£„Çπ„ÇØÂÆπÈáè„Åå‰∏çË∂≥„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇÊúÄ‰Ωé100MBÂøÖË¶Å„Åß„Åô„ÄÇ"
  fi

  # Check network connectivity
  if ! curl -s --connect-timeout 5 "https://api.github.com" >/dev/null; then
    error_with_rollback "GitHub API„Å∏„ÅÆÊé•Á∂ö„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÊé•Á∂ö„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ"
  fi

  # Check GitHub API rate limit
  local rate_limit
  rate_limit=$(gh api rate_limit --jq '.rate.remaining' 2>/dev/null || echo "0")
  if [[ $rate_limit -lt 10 ]]; then
    error_with_rollback "GitHub API „É¨„Éº„ÉàÂà∂Èôê„Å´Ëøë„Å•„ÅÑ„Å¶„ÅÑ„Åæ„Åô„ÄÇÊÆã„Çä: $rate_limit Âõû"
  fi

  success "Áí∞Â¢ÉÊ§úË®º„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü"
}

# Real-time sync and monitoring like Cursor
monitor_claude_progress() {
  local project_name="$1"
  local project_dir="$2"

  log "ü§ñ Claude„ÅÆÈÄ≤Êçó„Çí„É™„Ç¢„É´„Çø„Ç§„É†Áõ£Ë¶ñ‰∏≠..."
  echo "" >&2
  echo "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê" >&2
  echo "‚îÇ  ü§ñ Claude AI „Ç®„Éº„Ç∏„Çß„É≥„Éà - „É™„Ç¢„É´„Çø„Ç§„É†Áõ£Ë¶ñ„É¢„Éº„Éâ      ‚îÇ" >&2
  echo "‚îÇ                                                         ‚îÇ" >&2
  echo "‚îÇ  üí° CursorÈ¢®„ÅÆ‰ΩìÈ®ì: Â§âÊõ¥„ÇíËá™ÂãïÊ§úÂá∫„Åó„Å¶„É≠„Éº„Ç´„É´ÂêåÊúü     ‚îÇ" >&2
  echo "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò" >&2
  echo "" >&2

  local check_count=0
  local max_checks=60  # 30ÂàÜÈñìÁõ£Ë¶ñ (30ÁßíÈñìÈöî)
  local last_commit=""
  local initial_commit
  initial_commit=$(git rev-parse HEAD)

  echo "üîç Áõ£Ë¶ñÈñãÂßã: feat/initial-development „Éñ„É©„É≥„ÉÅ" >&2
  echo "‚è±Ô∏è  30ÁßíÈñìÈöî„Åß„ÉÅ„Çß„ÉÉ„ÇØ (ÊúÄÂ§ß30ÂàÜ)" >&2
  echo "üõë Ctrl+C „ÅßÁõ£Ë¶ñ„ÇíÂÅúÊ≠¢" >&2
  echo "" >&2

  while [[ $check_count -lt $max_checks ]]; do
    ((check_count++))

    # Progress indicator
    local dots=$(printf "%.0s." $(seq 1 $((check_count % 4))))
    printf "\rüîÑ „ÉÅ„Çß„ÉÉ„ÇØ‰∏≠ %s [%d/%d]" "$dots" "$check_count" "$max_checks" >&2

    # Check for new commits
    git fetch origin feat/initial-development >/dev/null 2>&1
    local latest_commit
    latest_commit=$(git rev-parse origin/feat/initial-development)

    if [[ "$latest_commit" != "$last_commit" ]] && [[ "$latest_commit" != "$initial_commit" ]]; then
      echo "" >&2
      echo "‚ú® Êñ∞„Åó„ÅÑÂ§âÊõ¥„ÇíÊ§úÂá∫„Åó„Åæ„Åó„ÅüÔºÅ" >&2
      echo "" >&2

      # Show commit details
      git log --oneline -1 "$latest_commit" >&2
      echo "" >&2

      # Pull changes
      log "üì• Â§âÊõ¥„Çí„É≠„Éº„Ç´„É´„Å´ÂêåÊúü‰∏≠..."
      git pull origin feat/initial-development >/dev/null 2>&1

      # Show file changes
      local changed_files
      changed_files=$(git diff --name-only "$last_commit".."$latest_commit" 2>/dev/null || git ls-files)

      if [[ -n "$changed_files" ]]; then
        echo "üìÅ Â§âÊõ¥„Åï„Çå„Åü„Éï„Ç°„Ç§„É´:" >&2
        echo "$changed_files" | while read -r file; do
          if [[ -f "$file" ]]; then
            local file_size
            file_size=$(wc -l < "$file" 2>/dev/null || echo "0")
            echo "   ‚úÖ $file ($file_size Ë°å)" >&2
          fi
        done
        echo "" >&2

        # Auto-install dependencies if package.json exists
        if [[ -f "package.json" ]]; then
          log "üì¶ ‰æùÂ≠òÈñ¢‰øÇ„ÇíËá™Âãï„Ç§„É≥„Çπ„Éà„Éº„É´‰∏≠..."
          npm install >/dev/null 2>&1 && success "‰æùÂ≠òÈñ¢‰øÇ„ÅÆ„Ç§„É≥„Çπ„Éà„Éº„É´ÂÆå‰∫Ü" || warning "‰æùÂ≠òÈñ¢‰øÇ„ÅÆ„Ç§„É≥„Çπ„Éà„Éº„É´„Åß„Ç®„É©„Éº„ÅåÁô∫Áîü"
        fi

        # Auto-install Python dependencies if requirements.txt exists
        if [[ -f "requirements.txt" ]]; then
          log "üêç Python‰æùÂ≠òÈñ¢‰øÇ„ÇíËá™Âãï„Ç§„É≥„Çπ„Éà„Éº„É´‰∏≠..."
          pip install -r requirements.txt >/dev/null 2>&1 && success "Python‰æùÂ≠òÈñ¢‰øÇ„ÅÆ„Ç§„É≥„Çπ„Éà„Éº„É´ÂÆå‰∫Ü" || warning "Python‰æùÂ≠òÈñ¢‰øÇ„ÅÆ„Ç§„É≥„Çπ„Éà„Éº„É´„Åß„Ç®„É©„Éº„ÅåÁô∫Áîü"
        fi

        # Open in preferred editor
        open_in_editor "$project_dir"

        # Show success message
        echo "üéâ ÂêåÊúüÂÆå‰∫ÜÔºÅ‰ª•‰∏ã„ÅßÈñãÁô∫„ÇíÁ∂öË°å„Åß„Åç„Åæ„Åô:" >&2
        echo "" >&2
        echo "   üìÇ „Éó„É≠„Ç∏„Çß„ÇØ„Éà„Éï„Ç©„É´„ÉÄ: $project_dir" >&2
        if [[ -f "package.json" ]]; then
          echo "   üöÄ ÈñãÁô∫„Çµ„Éº„Éê„ÉºËµ∑Âãï: npm run dev" >&2
        fi
        if [[ -f "requirements.txt" ]]; then
          echo "   üêç Python „Çµ„Éº„Éê„ÉºËµ∑Âãï: python app.py" >&2
        fi
        echo "   üîó GitHub PR: https://github.com/$GH_USERNAME/$project_name/pull/1" >&2
        echo "" >&2

        return 0
      fi

      last_commit="$latest_commit"
    fi

    # Check if Claude is still working (look for recent comments)
    local recent_comments
    recent_comments=$(gh api repos/"$GH_USERNAME"/"$project_name"/issues/1/comments --jq '.[].created_at' 2>/dev/null | tail -1)
    if [[ -n "$recent_comments" ]]; then
      local comment_age
      comment_age=$(date -d "$recent_comments" +%s 2>/dev/null || echo "0")
      local current_time
      current_time=$(date +%s)
      local age_minutes=$(( (current_time - comment_age) / 60 ))

      if [[ $age_minutes -lt 5 ]]; then
        printf " (Claude„Åå‰ΩúÊ•≠‰∏≠...)" >&2
      fi
    fi

    sleep 30
  done

  echo "" >&2
  warning "Áõ£Ë¶ñÊôÇÈñì„ÅåÁµÇ‰∫Ü„Åó„Åæ„Åó„Åü„ÄÇÊâãÂãï„ÅßÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ: https://github.com/$GH_USERNAME/$project_name/pull/1"
}

# Smart editor detection and opening
open_in_editor() {
  local project_dir="$1"

  # Detect preferred editor
  if command -v cursor >/dev/null 2>&1; then
    log "üéØ Cursor„Åß„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÇíÈñã„ÅÑ„Å¶„ÅÑ„Åæ„Åô..."
    cursor "$project_dir" >/dev/null 2>&1 &
  elif command -v code >/dev/null 2>&1; then
    log "üíª VS Code„Åß„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÇíÈñã„ÅÑ„Å¶„ÅÑ„Åæ„Åô..."
    code "$project_dir" >/dev/null 2>&1 &
  elif command -v subl >/dev/null 2>&1; then
    log "üìù Sublime Text„Åß„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÇíÈñã„ÅÑ„Å¶„ÅÑ„Åæ„Åô..."
    subl "$project_dir" >/dev/null 2>&1 &
  else
    log "üìÇ Finder„Åß„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Éï„Ç©„É´„ÉÄ„ÇíÈñã„ÅÑ„Å¶„ÅÑ„Åæ„Åô..."
    open "$project_dir" >/dev/null 2>&1 &
  fi
}

# Main execution function
main() {
  log "üöÄ ClaudeËá™Âãï„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó v$SCRIPT_VERSION „ÇíÈñãÂßã"

  # Load user configuration
  load_config

  # Enhanced environment validation
  validate_environment

  # Check if running in existing Git repo
  if [[ -d ".git" ]]; then
    error "Êó¢Â≠ò„ÅÆGit„É™„Éù„Ç∏„Éà„É™ÂÜÖ„Åß„ÅØÂÆüË°å„Åß„Åç„Åæ„Åõ„Çì„ÄÇ„ÇØ„É™„Éº„É≥„Å™„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅßÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ"
  fi

  # Run all setup steps
  check_prerequisites

  local project_name
  project_name=$(get_project_name)

  local project_dir
  project_dir=$(get_project_directory)

  check_conflicts "$project_name" "$project_dir"

  local template
  template=$(get_project_template)

  local license
  license=$(get_project_license)

  local visibility
  visibility=$(get_repository_visibility)

  # Setup with cleanup tracking
  setup_local_project "$project_name" "$project_dir"
  add_cleanup "rm -rf '$project_dir/$project_name' 2>/dev/null || true"

  create_github_repo "$project_name" "$visibility"
  add_cleanup "gh repo delete '$GH_USERNAME/$project_name' --yes 2>/dev/null || true"

  setup_github_secrets "$project_name"

  commit_and_push "$project_name"

  create_feature_pr "$project_name"

  trigger_claude "$project_name" "$template" "$license"

  # Update project statistics
  update_project_stats "$project_name" "$template" "$license" "$visibility"

  # Save configuration with new stats
  save_config

  # Show project statistics
  show_project_stats

  # Clear cleanup stack on success
  CLEANUP_STACK=()

  # Final success message
  log "üéâ ÊàêÂäü: $project_name „ÅÆÊ∫ñÂÇô„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„ÅüÔºÅ"
  echo "" >&2
  echo "=========================================" >&2
  echo "üéä „Éó„É≠„Ç∏„Çß„ÇØ„Éà‰ΩúÊàêÂÆå‰∫ÜÔºÅ" >&2
  echo "=========================================" >&2
  echo "üìç „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÂ†¥ÊâÄ: $project_dir/$project_name" >&2
  echo "üîó GitHub„É™„Éù„Ç∏„Éà„É™: https://github.com/$GH_USERNAME/$project_name" >&2
  echo "üìã „Éó„É´„É™„ÇØ„Ç®„Çπ„Éà: https://github.com/$GH_USERNAME/$project_name/pulls" >&2
  echo "" >&2

  # Interactive next steps (Cursor-style UX)
  echo "üöÄ Ê¨°„Å´‰Ωï„Çí„Åó„Åæ„Åô„ÅãÔºü" >&2
  echo "1. ü§ñ Claude„ÅÆÈÄ≤Êçó„Çí„É™„Ç¢„É´„Çø„Ç§„É†„ÅßÁõ£Ë¶ñ (Êé®Â•®)" >&2
  echo "2. üéØ ‰ªä„Åô„ÅêCursor„ÅßÈñã„Åè" >&2
  echo "3. üíª VS Code„ÅßÈñã„Åè" >&2
  echo "4. üìÇ Finder„ÅßÈñã„Åè" >&2
  echo "5. üåê GitHub„ÅßPR„ÇíÁ¢∫Ë™ç" >&2
  echo "6. üìä Áµ±Ë®à„ÅÆ„ÅøË°®Á§∫„Åó„Å¶ÁµÇ‰∫Ü" >&2
  echo "" >&2

  local choice=""
  echo -n "ÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ (1-6) [„Éá„Éï„Ç©„É´„Éà: 1]: " >&2
  read choice
  choice="${choice:-1}"

  case $choice in
    1)
      echo "" >&2
      echo "ü§ñ Claude„ÅÆ‰ΩúÊ•≠„Çí„É™„Ç¢„É´„Çø„Ç§„É†„ÅßÁõ£Ë¶ñ„Åó„Åæ„Åô..." >&2
      monitor_claude_progress "$project_name" "$project_dir/$project_name"
      ;;
    2)
      if command -v cursor >/dev/null 2>&1; then
        log "üéØ Cursor„ÅßÈñã„ÅÑ„Å¶„ÅÑ„Åæ„Åô..."
        cursor "$project_dir/$project_name" &
        echo "‚úÖ Cursor„Åß„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÇíÈñã„Åç„Åæ„Åó„ÅüÔºÅ" >&2
      else
        warning "Cursor„Åå„Ç§„É≥„Çπ„Éà„Éº„É´„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇVS Code„ÅßÈñã„Åç„Åæ„Åô..."
        code "$project_dir/$project_name" &
      fi
      ;;
    3)
      log "üíª VS Code„ÅßÈñã„ÅÑ„Å¶„ÅÑ„Åæ„Åô..."
      code "$project_dir/$project_name" &
      echo "‚úÖ VS Code„Åß„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÇíÈñã„Åç„Åæ„Åó„ÅüÔºÅ" >&2
      ;;
    4)
      log "üìÇ Finder„ÅßÈñã„ÅÑ„Å¶„ÅÑ„Åæ„Åô..."
      open "$project_dir/$project_name" &
      echo "‚úÖ Finder„Åß„Éï„Ç©„É´„ÉÄ„ÇíÈñã„Åç„Åæ„Åó„ÅüÔºÅ" >&2
      ;;
    5)
      log "üåê GitHub„ÅßPR„ÇíÈñã„ÅÑ„Å¶„ÅÑ„Åæ„Åô..."
      open "https://github.com/$GH_USERNAME/$project_name/pull/1" &
      echo "‚úÖ „Éñ„É©„Ç¶„Ç∂„ÅßPR„ÇíÈñã„Åç„Åæ„Åó„ÅüÔºÅ" >&2
      ;;
    6)
      echo "üìä Áµ±Ë®à„ÅÆ„ÅøË°®Á§∫„Åó„Å¶ÁµÇ‰∫Ü„Åó„Åæ„Åô„ÄÇ" >&2
      ;;
    *)
      warning "ÁÑ°Âäπ„Å™ÈÅ∏Êäû„Åß„Åô„ÄÇÁµ±Ë®à„ÇíË°®Á§∫„Åó„Å¶ÁµÇ‰∫Ü„Åó„Åæ„Åô„ÄÇ"
      ;;
  esac

  echo "" >&2
  echo "üí° „ÅÑ„Å§„Åß„ÇÇ‰ª•‰∏ã„ÅÆ„Ç≥„Éû„É≥„Éâ„Åß„Ç¢„ÇØ„Çª„Çπ„Åß„Åç„Åæ„Åô:" >&2
  echo "   cd '$project_dir/$project_name'" >&2
  echo "   gh pr view 1 --web  # PR„Çí„Éñ„É©„Ç¶„Ç∂„ÅßÈñã„Åè" >&2
  echo "" >&2
  echo "üìä „Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó„É≠„Ç∞: $LOG_FILE" >&2
  echo "=========================================" >&2
}

# Execute main function
main "$@"